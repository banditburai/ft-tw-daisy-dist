name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true        
        type: string

permissions:
  contents: read

env:
  APP_NAME: tailwindcss-oxide
  NODE_VERSION: 20
  OXIDE_LOCATION: ./crates/node

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tailwind_version: ${{ steps.get-tag.outputs.tag }}
      daisyui_version: ${{ steps.get-daisyui.outputs.version }}
    steps:
      - name: Get latest v4 tag
        id: get-tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/tailwindlabs/tailwindcss/tags | jq -r '.[] | select(.name | startswith("v4")) | .name' | head -n1)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Clone Tailwind
        uses: actions/checkout@v4
        with:
          repository: tailwindlabs/tailwindcss
          ref: ${{ steps.get-tag.outputs.tag }}
          path: tailwindcss

      - name: Setup workspace and fix package references
        working-directory: tailwindcss
        run: |
          # Create minimal workspace files
          echo '{
            "private": true,
            "workspaces": [
              "crates/node",
              "crates/node/npm/*",
              "packages/*",
              "playgrounds/*",
              "integrations"
            ]
          }' > package.json

          echo 'packages:
            - "crates/node"
            - "crates/node/npm/*"
            - "packages/*"
            - "playgrounds/*"
            - "integrations"' > pnpm-workspace.yaml

          # Replace catalog: references
          node -e '
            const fs = require("fs");
            const path = require("path");
            
            function findPackageJsonFiles(dir) {
              let results = [];
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                if (stat.isDirectory()) {
                  results = results.concat(findPackageJsonFiles(filePath));
                } else if (file === "package.json") {
                  results.push(filePath);
                }
              }
              return results;
            }

            const packageFiles = findPackageJsonFiles(".");
            const replacements = {
              "@types/node": "^20.14.8",
              "lightningcss": "^1.26.0",
              "vite": "^6.0.0"
            };

            for (const file of packageFiles) {
              const content = JSON.parse(fs.readFileSync(file, "utf8"));
              let modified = false;
              
              ["dependencies", "devDependencies", "peerDependencies"].forEach(depType => {
                if (content[depType]) {
                  Object.entries(content[depType]).forEach(([pkg, version]) => {
                    if (version === "catalog:" && replacements[pkg]) {
                      content[depType][pkg] = replacements[pkg];
                      modified = true;
                    }
                  });
                }
              });
              
              if (modified) {
                fs.writeFileSync(file, JSON.stringify(content, null, 2) + "\n");
              }
            }
          '

      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # First install all Tailwind dependencies
      - name: Install Tailwind dependencies
        working-directory: tailwindcss
        run: pnpm install --ignore-scripts --filter=!./playgrounds/*

      # Then setup the standalone package
      - name: Setup Tailwind standalone
        working-directory: tailwindcss/packages/@tailwindcss-standalone
        run: |
          # Create .npmrc with required settings
          echo "enable-pre-post-scripts=true
          auto-install-peers=true
          node-linker=hoisted" > .npmrc
          
          # Add lightningcss dependency and patchedDependencies
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            pkg.dependencies = pkg.dependencies || {};
            pkg.dependencies["lightningcss"] = "1.26.0";
            pkg.patchedDependencies = {
              "lightningcss": "1.26.0"
            };
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2) + "\n");
          '
          
          # Add daisyui to the standalone package
          pnpm install --no-frozen-lockfile
          pnpm add -D daisyui@beta
          
          # Add daisyui to resolver and loader
          sed -i '/case "@tailwindcss\/aspect-ratio":/a\      case "daisyui":\n        return id' src/index.ts
          sed -i '/return require("@tailwindcss\/aspect-ratio")/a\    } else if (id.endsWith("daisyui")) {\n      return require("daisyui")' src/index.ts

      - name: Get DaisyUI version
        id: get-daisyui
        working-directory: tailwindcss/packages/@tailwindcss-standalone
        run: |
          DAISYUI_VERSION=$(pnpm list daisyui --json | jq -r '.[0].dependencies.daisyui.version')
          echo "version=$DAISYUI_VERSION" >> $GITHUB_OUTPUT

      - name: Upload Tailwind directory
        uses: actions/upload-artifact@v4
        with:
          name: tailwind-prepared
          path: tailwindcss/

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          # macOS
          - os: macos-13
            target: x86_64-apple-darwin
            strip: strip -x
          - os: macos-14
            target: aarch64-apple-darwin
            page-size: 14
            strip: strip -x
          # Android
          - os: ubuntu-latest
            target: aarch64-linux-android
            strip: ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            strip: ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            strip: strip
            container:
              image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            strip: llvm-strip
            container:
              image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            strip: llvm-strip
            container:
              image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-zig
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            strip: aarch64-linux-musl-strip
            download: true
            container:
              image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            strip: strip
            download: true
            container:
              image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

    name: Build ${{ matrix.target }} (OXIDE)
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
            
      - name: Download Tailwind directory
        uses: actions/download-artifact@v4
        with:
          name: tailwind-prepared
          path: tailwindcss

      - uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Cache steps after all setup but before build
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache oxide build
        uses: actions/cache@v4
        with:
          path: |
            ./oxide/target/
            ./crates/node/*.node
            ./crates/node/index.js
            ./crates/node/index.d.ts
          key: ${{ runner.os }}-${{ matrix.target }}-oxide-${{ hashFiles('./crates/**/*') }}

      - name: Install dependencies
        working-directory: tailwindcss
        run: pnpm install --ignore-scripts --filter=!./playgrounds/*

      # Keep existing Rust installation step unchanged
      - name: Install Rust and targets
        shell: bash
        run: |
          # Add cargo to PATH - handle both container and non-container environments
          if [ -f "/usr/local/cargo/env" ]; then
            source "/usr/local/cargo/env"
          elif [ -f "$HOME/.cargo/env" ]; then
            source "$HOME/.cargo/env"
          fi
          
          # Install latest stable
          rustup toolchain install stable --profile minimal
          
          # Add target from matrix
          rustup target add ${{ matrix.target }}
          
          rustup component add rust-src
          
          # Set as default toolchain
          rustup default stable
          
          # Verify installation
          rustup show
          rustc --version
          cargo --version

      - name: Setup Cross-Compilation Tools
        if: contains(matrix.target, 'android')
        working-directory: tailwindcss/crates/node
        run: |
          # Install required target
          rustup target add ${{ matrix.target }}
          
          # Create cargo config in the correct location
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-linux-android]
          ar = "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          rustflags = [
            "-C", "link-arg=--target=aarch64-linux-android21",
            "-C", "link-arg=-fuse-ld=lld",
            "-l", "c++_shared",
            "-L", "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/lib64"
          ]

          [target.armv7-linux-androideabi]
          ar = "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
          rustflags = [
            "-C", "link-arg=--target=armv7a-linux-androideabi21",
            "-C", "link-arg=-fuse-ld=lld",
            "-l", "c++_shared",
            "-L", "$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/lib64"
          ]
          EOF
          
          # Set environment variables for Android targets
          echo "CC_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          
          echo "CC_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
          echo "CXX_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
          echo "AR_armv7_linux_androideabi=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          
          # Verify NDK setup
          ls -la $ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/

      - name: Setup Cross-Compilation Tools
        if: contains(matrix.target, 'linux-musl')
        working-directory: tailwindcss/crates/node
        shell: bash
        run: |
          # Install required tools
          apk add --no-cache zig musl-dev gcc
          
          # Create cargo config in the correct location
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-unknown-linux-musl]
          linker = "zig cc -target aarch64-linux-musl"
          rustflags = ["-C", "target-feature=+crt-static"]

          [target.x86_64-unknown-linux-musl]
          linker = "zig cc -target x86_64-linux-musl"
          rustflags = ["-C", "target-feature=+crt-static"]
          EOF

      - name: Build release
        working-directory: tailwindcss
        shell: bash
        env:
          RUST_TARGET: ${{ matrix.target }}
          JEMALLOC_SYS_WITH_LG_PAGE: ${{ matrix.page-size }}
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          NAPI_BUILD_PLATFORM: ${{ matrix.target }}
          SKIP_PLATFORM_CHECK: true
        run: pnpm run --filter ${{ env.OXIDE_LOCATION }} build

      - name: Debug build output
        working-directory: tailwindcss
        shell: bash
        run: |
          echo "Target: ${{ matrix.target }}"
          echo "Files in node directory:"
          ls -la ${{ env.OXIDE_LOCATION }}/*.node
          echo "File information:"
          file ${{ env.OXIDE_LOCATION }}/*.node

      - name: Strip debug symbols
        working-directory: tailwindcss
        if: ${{ matrix.strip }}
        run: ${{ matrix.strip }} ${{ env.OXIDE_LOCATION }}/*.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: ${{ env.OXIDE_LOCATION }}/*.node

  release:
    runs-on: macos-14
    timeout-minutes: 15
    name: Build and release Tailwind CSS
    permissions:
      contents: write
    needs:
      - build
      - prepare

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache oxide build
        uses: actions/cache@v4
        with:
          path: |
            ./oxide/target/
            ./crates/node/*.node
            ./crates/node/index.js
            ./crates/node/index.d.ts
          key: ${{ runner.os }}-${{ matrix.target }}-oxide-${{ hashFiles('./crates/**/*') }}

      - name: Install dependencies
        run: pnpm --filter=!./playgrounds/* install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OXIDE_LOCATION }}

      - name: Move artifacts
        run: |
          cd ${{ env.OXIDE_LOCATION }}
          cp bindings-x86_64-pc-windows-msvc/* ./npm/win32-x64-msvc/
          cp bindings-aarch64-pc-windows-msvc/* ./npm/win32-arm64-msvc/
          cp bindings-x86_64-apple-darwin/* ./npm/darwin-x64/
          cp bindings-aarch64-apple-darwin/* ./npm/darwin-arm64/
          cp bindings-aarch64-linux-android/* ./npm/android-arm64/
          cp bindings-armv7-linux-androideabi/* ./npm/android-arm-eabi/
          cp bindings-aarch64-unknown-linux-gnu/* ./npm/linux-arm64-gnu/
          cp bindings-aarch64-unknown-linux-musl/* ./npm/linux-arm64-musl/
          cp bindings-armv7-unknown-linux-gnueabihf/* ./npm/linux-arm-gnueabihf/
          cp bindings-x86_64-unknown-linux-gnu/* ./npm/linux-x64-gnu/
          cp bindings-x86_64-unknown-linux-musl/* ./npm/linux-x64-musl/

      - name: Build Tailwind CSS
        run: |
          cd tailwindcss
          pnpm run build

      - name: Run pre-publish optimizations scripts
        run: |
          cd tailwindcss
          node ./scripts/pre-publish-optimizations.mjs

      - name: Upload Standalone Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tailwindcss-standalone
          path: tailwindcss/packages/@tailwindcss-standalone/dist/

      - name: Create template package
        run: |
          mkdir -p fasthtml-template/styles
          echo '@import "tailwindcss";' > fasthtml-template/styles/input.css
          echo '@plugin "daisyui";' >> fasthtml-template/styles/input.css
          cp Makefile fasthtml-template/
          cp main.py fasthtml-template/
          zip -r fasthtml-template.zip fasthtml-template/

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ inputs.version }}
          body: |
            Updated to:
            - Tailwind CSS ${{ needs.prepare.outputs.tailwind_version }}
            - DaisyUI ${{ needs.prepare.outputs.daisyui_version }}
          files: |
            tailwindcss/packages/@tailwindcss-standalone/dist/sha256sums.txt
            tailwindcss/packages/@tailwindcss-standalone/dist/tailwindcss-linux-arm64
            tailwindcss/packages/@tailwindcss-standalone/dist/tailwindcss-linux-x64
            tailwindcss/packages/@tailwindcss-standalone/dist/tailwindcss-macos-arm64
            tailwindcss/packages/@tailwindcss-standalone/dist/tailwindcss-macos-x64
            tailwindcss/packages/@tailwindcss-standalone/dist/tailwindcss-windows-x64.exe
            fasthtml-template.zip